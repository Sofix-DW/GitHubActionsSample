name: 'Update Version'
description: 'Updates project and NuGet versions'
inputs:
  prereleaseenabled:
    description: 'Whether prerelease is enabled'
    required: true
    type: boolean
  prerelease:
    description: 'PreRelease identifier (e.g. rc, alpha, beta)'
    required: true
    type: string
  version_file:
    description: 'Path to the version file'
    required: true
    type: string

runs:
  using: "composite"
  steps:
    - name: Update Version
      id: update_version
      shell: bash
      run: |
        echo "inputs.prereleaseenabled: ${{ inputs.prereleaseenabled }}"
        echo "inputs.prerelease: ${{ inputs.prerelease }}"
        echo "inputs.configuration: ${{ inputs.configuration }}"

        PROJECT_VERSION=$(grep -oP '(?<=<ProjectVersion>).*(?=</ProjectVersion>)' ${{ inputs.version_file }})
        NUGET_VERSION=$(grep -oP '(?<=<NugetPackageVersion>).*(?=</NugetPackageVersion>)' ${{ inputs.version_file }})
        echo "PROJECT_VERSION: $PROJECT_VERSION"
        echo "NUGET_VERSION: $NUGET_VERSION"

        IFS='.' read -r MAJOR MINOR BUILD <<< "${NUGET_VERSION%-*}"
        PRERELEASE="${NUGET_VERSION#*-}"
        if [ "$PRERELEASE" = "$NUGET_VERSION" ]; then
          PRERELEASE_IDENTIFIER=""
          PRERELEASE_NUMBER=""
        else
          PRERELEASE_IDENTIFIER=${PRERELEASE%%.*}
          PRERELEASE_NUMBER=$(echo $PRERELEASE | awk -F'.' '{print $NF}')
        fi

        echo "MAJOR: $MAJOR"
        echo "MINOR: $MINOR"
        echo "BUILD: $BUILD"
        echo "PRERELEASE_IDENTIFIER: $PRERELEASE_IDENTIFIER"
        echo "PRERELEASE_NUMBER: $PRERELEASE_NUMBER"

        if ${{ inputs.prereleaseenabled }}; then
          echo "# Prerelease version"
          if [ "$PRERELEASE_IDENTIFIER" = "" ]; then
            echo "# set the prerelease number to 0"
            PRERELEASE_NUMBER="0"
          fi
          PRERELEASE_NUMBER=$((PRERELEASE_NUMBER + 1))
          TARGET_PROJECT_VERSION="$MAJOR.$MINOR.$BUILD.0"
          TARGET_NUGET_VERSION="$MAJOR.$MINOR.$BUILD-${{ inputs.prerelease }}.$PRERELEASE_NUMBER"
        else
          BUILD=$((BUILD + 1))
          TARGET_PROJECT_VERSION="$MAJOR.$MINOR.$BUILD.0"
          TARGET_NUGET_VERSION="$MAJOR.$MINOR.$BUILD"
        fi

        echo "TARGET_PROJECT_VERSION: ${TARGET_PROJECT_VERSION}"
        echo "TARGET_NUGET_VERSION: ${TARGET_NUGET_VERSION}"
        echo "NEW_PROJECT_VERSION=${TARGET_PROJECT_VERSION}" >> $GITHUB_ENV
        echo "NEW_NUGET_VERSION=${TARGET_NUGET_VERSION}" >> $GITHUB_ENV

        sed -i "s/<ProjectVersion>.*<\/ProjectVersion>/<ProjectVersion>${TARGET_PROJECT_VERSION}<\/ProjectVersion>/" ${{ inputs.version_file }}
        sed -i "s/<NugetPackageVersion>.*<\/NugetPackageVersion>/<NugetPackageVersion>${TARGET_NUGET_VERSION}<\/NugetPackageVersion>/" ${{ inputs.version_file }}
        cat ${{ inputs.version_file }}