name: Publish NuGet Packages

on:
  workflow_dispatch:
    inputs:
      prereleaseenabled:
        required: true
        type: choice
        options:
          - enabled
          - disabled
        default: 'enabled'
      prerelease:
        description: 'PreRelease identifier (e.g. rc, alpha, beta)'
        required: false
        type: string
        default: 'rc'
      configuration:
        description: 'configuration'
        required: true
        type: choice
        options:
          - Release
          - Debug
        default: 'Release'

env:
  VERSION_FILE: ${{ github.workspace }}/SolutionDefines.ProjectVersion.targets
  NEW_PROJECT_VERSION: "*.*.*.*"
  NEW_NUGET_VERSION: "*.*.*"
  DOT_NET_VERSION: "8.0.x"

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      TARGET_PROJECT_VERSION: ${{ steps.update_version.outputs.TARGET_PROJECT_VERSION }}
      TARGET_NUGET_VERSION: ${{ steps.update_version.outputs.TARGET_NUGET_VERSION }}
    steps:
      - name: Parameters
        run: |
          echo "prereleaseenabled: ${{ github.event.inputs.prereleaseenabled }}"
          echo "prerelease: ${{ github.event.inputs.prerelease }}"
          echo "configuration: ${{ github.event.inputs.configuration }}"
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ env.DOT_NET_VERSION }}
      - name: Restore dependencies
        run: dotnet restore
      - name: Call Update Version Workflow
        uses: ./.github/actions/update-version
        id: update_version
        with:
          prereleaseenabled: ${{ github.event.inputs.prereleaseenabled == 'enabled' }}
          prerelease: ${{ github.event.inputs.prerelease }}
          version_file: ${{ env.VERSION_FILE }}
      - name: Build
        run: dotnet build --configuration ${{ github.event.inputs.configuration }} --no-restore
      - name: Test
        run: dotnet test --no-build --configuration ${{ github.event.inputs.configuration }} --logger trx --results-directory TestResults
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults
        if: always()
      - name: Pack
        run: dotnet pack --configuration ${{ github.event.inputs.configuration }} --no-build --output nupkgs
      - uses: actions/upload-artifact@v4
        with:
          name: build-output
          path: ${{ github.workspace }}

  test:
    needs: build
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: build-output
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore dependencies
        run: dotnet restore
      - name: Test
        run: dotnet test --no-build --configuration ${{ github.event.inputs.configuration }} --logger trx --results-directory TestResults

  publish:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Generate Token
        id: app-token
        uses: actions/create-github-app-token@v1
        with:
          app-id: ${{ secrets.BOT_APP_ID }}
          private-key: ${{ secrets.BOT_PRIVATE_KEY }}
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: actions/download-artifact@v4
        with:
          name: build-output
      - name: Commit and push changes
        id: git_push
        run: |
          set -e
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git remote set-url origin https://x-access-token:${{ steps.app-token.outputs.token }}@github.com/${{ github.repository }}
          git add ${{ env.VERSION_FILE }}
          git commit -m "Update project version"
          if git push; then
            echo "push_success=true" >> $GITHUB_ENV
          else
            echo "push_success=false" >> $GITHUB_ENV
            exit 1
          fi
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
      - name: Create and Push Tag
        if: env.push_success == 'true'
        run: |
          # Extract NugetPackageVersion from the XML file
          VERSION=$(xmllint --xpath "string(//PropertyGroup/NugetPackageVersion)" ${{ env.VERSION_FILE }})

          # Ensure VERSION is not empty
          if [ -z "$VERSION" ]; then
            echo "Error: NugetPackageVersion is empty. Exiting."
            exit 1
          fi
          
          # Create the tag with the version
          TAG="v$VERSION"
          echo "Creating tag: $TAG"

          # Create and push the new tag
          git tag "$TAG"
          git push origin "$TAG"
        env:
          GITHUB_TOKEN: ${{ steps.app-token.outputs.token }}
